# Generated from Gramatica.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,263,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,
        3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
        1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,
        1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,
        1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,
        1,26,5,26,181,8,26,10,26,12,26,184,9,26,1,27,4,27,187,8,27,11,27,
        12,27,188,1,27,1,27,4,27,193,8,27,11,27,12,27,194,3,27,197,8,27,
        1,28,1,28,5,28,201,8,28,10,28,12,28,204,9,28,1,28,1,28,1,29,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,217,8,29,1,30,1,30,1,31,
        1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,4,36,232,8,36,
        11,36,12,36,233,1,36,1,36,1,37,1,37,1,37,1,37,5,37,242,8,37,10,37,
        12,37,245,9,37,1,37,1,37,1,38,1,38,1,38,1,38,5,38,253,8,38,10,38,
        12,38,256,9,38,1,38,1,38,1,38,1,38,1,38,1,38,1,254,0,39,1,1,3,2,
        5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
        15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
        26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
        37,75,38,77,39,1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
        97,122,1,0,48,57,3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,2,0,
        10,10,13,13,271,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
        1,79,1,0,0,0,3,86,1,0,0,0,5,89,1,0,0,0,7,94,1,0,0,0,9,100,1,0,0,
        0,11,104,1,0,0,0,13,110,1,0,0,0,15,117,1,0,0,0,17,119,1,0,0,0,19,
        121,1,0,0,0,21,123,1,0,0,0,23,125,1,0,0,0,25,127,1,0,0,0,27,129,
        1,0,0,0,29,131,1,0,0,0,31,134,1,0,0,0,33,137,1,0,0,0,35,139,1,0,
        0,0,37,141,1,0,0,0,39,144,1,0,0,0,41,147,1,0,0,0,43,150,1,0,0,0,
        45,153,1,0,0,0,47,157,1,0,0,0,49,163,1,0,0,0,51,171,1,0,0,0,53,178,
        1,0,0,0,55,186,1,0,0,0,57,198,1,0,0,0,59,216,1,0,0,0,61,218,1,0,
        0,0,63,220,1,0,0,0,65,222,1,0,0,0,67,224,1,0,0,0,69,226,1,0,0,0,
        71,228,1,0,0,0,73,231,1,0,0,0,75,237,1,0,0,0,77,248,1,0,0,0,79,80,
        5,109,0,0,80,81,5,97,0,0,81,82,5,105,0,0,82,83,5,110,0,0,83,84,5,
        40,0,0,84,85,5,41,0,0,85,2,1,0,0,0,86,87,5,105,0,0,87,88,5,102,0,
        0,88,4,1,0,0,0,89,90,5,101,0,0,90,91,5,108,0,0,91,92,5,115,0,0,92,
        93,5,101,0,0,93,6,1,0,0,0,94,95,5,119,0,0,95,96,5,104,0,0,96,97,
        5,105,0,0,97,98,5,108,0,0,98,99,5,101,0,0,99,8,1,0,0,0,100,101,5,
        102,0,0,101,102,5,111,0,0,102,103,5,114,0,0,103,10,1,0,0,0,104,105,
        5,112,0,0,105,106,5,114,0,0,106,107,5,105,0,0,107,108,5,110,0,0,
        108,109,5,116,0,0,109,12,1,0,0,0,110,111,5,114,0,0,111,112,5,101,
        0,0,112,113,5,116,0,0,113,114,5,117,0,0,114,115,5,114,0,0,115,116,
        5,110,0,0,116,14,1,0,0,0,117,118,5,61,0,0,118,16,1,0,0,0,119,120,
        5,43,0,0,120,18,1,0,0,0,121,122,5,45,0,0,122,20,1,0,0,0,123,124,
        5,42,0,0,124,22,1,0,0,0,125,126,5,47,0,0,126,24,1,0,0,0,127,128,
        5,94,0,0,128,26,1,0,0,0,129,130,5,37,0,0,130,28,1,0,0,0,131,132,
        5,61,0,0,132,133,5,61,0,0,133,30,1,0,0,0,134,135,5,33,0,0,135,136,
        5,61,0,0,136,32,1,0,0,0,137,138,5,60,0,0,138,34,1,0,0,0,139,140,
        5,62,0,0,140,36,1,0,0,0,141,142,5,60,0,0,142,143,5,61,0,0,143,38,
        1,0,0,0,144,145,5,62,0,0,145,146,5,61,0,0,146,40,1,0,0,0,147,148,
        5,43,0,0,148,149,5,43,0,0,149,42,1,0,0,0,150,151,5,45,0,0,151,152,
        5,45,0,0,152,44,1,0,0,0,153,154,5,105,0,0,154,155,5,110,0,0,155,
        156,5,116,0,0,156,46,1,0,0,0,157,158,5,102,0,0,158,159,5,108,0,0,
        159,160,5,111,0,0,160,161,5,97,0,0,161,162,5,116,0,0,162,48,1,0,
        0,0,163,164,5,98,0,0,164,165,5,111,0,0,165,166,5,111,0,0,166,167,
        5,108,0,0,167,168,5,101,0,0,168,169,5,97,0,0,169,170,5,110,0,0,170,
        50,1,0,0,0,171,172,5,115,0,0,172,173,5,116,0,0,173,174,5,114,0,0,
        174,175,5,105,0,0,175,176,5,110,0,0,176,177,5,103,0,0,177,52,1,0,
        0,0,178,182,7,0,0,0,179,181,7,1,0,0,180,179,1,0,0,0,181,184,1,0,
        0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,54,1,0,0,0,184,182,1,0,0,
        0,185,187,7,2,0,0,186,185,1,0,0,0,187,188,1,0,0,0,188,186,1,0,0,
        0,188,189,1,0,0,0,189,196,1,0,0,0,190,192,5,46,0,0,191,193,7,2,0,
        0,192,191,1,0,0,0,193,194,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,
        0,195,197,1,0,0,0,196,190,1,0,0,0,196,197,1,0,0,0,197,56,1,0,0,0,
        198,202,5,34,0,0,199,201,8,3,0,0,200,199,1,0,0,0,201,204,1,0,0,0,
        202,200,1,0,0,0,202,203,1,0,0,0,203,205,1,0,0,0,204,202,1,0,0,0,
        205,206,5,34,0,0,206,58,1,0,0,0,207,208,5,116,0,0,208,209,5,114,
        0,0,209,210,5,117,0,0,210,217,5,101,0,0,211,212,5,102,0,0,212,213,
        5,97,0,0,213,214,5,108,0,0,214,215,5,115,0,0,215,217,5,101,0,0,216,
        207,1,0,0,0,216,211,1,0,0,0,217,60,1,0,0,0,218,219,5,40,0,0,219,
        62,1,0,0,0,220,221,5,41,0,0,221,64,1,0,0,0,222,223,5,123,0,0,223,
        66,1,0,0,0,224,225,5,125,0,0,225,68,1,0,0,0,226,227,5,59,0,0,227,
        70,1,0,0,0,228,229,5,44,0,0,229,72,1,0,0,0,230,232,7,4,0,0,231,230,
        1,0,0,0,232,233,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,235,
        1,0,0,0,235,236,6,36,0,0,236,74,1,0,0,0,237,238,5,47,0,0,238,239,
        5,47,0,0,239,243,1,0,0,0,240,242,8,5,0,0,241,240,1,0,0,0,242,245,
        1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,246,1,0,0,0,245,243,
        1,0,0,0,246,247,6,37,0,0,247,76,1,0,0,0,248,249,5,47,0,0,249,250,
        5,47,0,0,250,254,1,0,0,0,251,253,9,0,0,0,252,251,1,0,0,0,253,256,
        1,0,0,0,254,255,1,0,0,0,254,252,1,0,0,0,255,257,1,0,0,0,256,254,
        1,0,0,0,257,258,5,47,0,0,258,259,5,47,0,0,259,260,5,47,0,0,260,261,
        1,0,0,0,261,262,6,38,0,0,262,78,1,0,0,0,10,0,182,188,194,196,202,
        216,233,243,254,1,6,0,0
    ]

class GramaticaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    MAIN = 1
    IF = 2
    ELSE = 3
    WHILE = 4
    FOR = 5
    PRINT = 6
    RETURN = 7
    ASIGNACION = 8
    MAS = 9
    MENOS = 10
    MULTIPLICACION = 11
    DIVISION = 12
    POTENCIA = 13
    MOD = 14
    IGUAL = 15
    DIFERENTE = 16
    MENOR = 17
    MAYOR = 18
    MENOR_IGUAL_QUE = 19
    MAYOR_IGUAL_QUE = 20
    MASMAS = 21
    MENOSMENOS = 22
    INT = 23
    FLOAT = 24
    BOOLEAN = 25
    STRING = 26
    VARIABLE = 27
    NUMERO = 28
    CADENA = 29
    BOOLEANO = 30
    PARENTESIS_APERTURA = 31
    PARENTESIS_CIERRE = 32
    LLAVE_APERTURA = 33
    LLAVE_CIERRE = 34
    FIN_DE_LINEA = 35
    COMA = 36
    WS = 37
    COMENTARIO_LINEA = 38
    COMENTARIO_MULTILINEA = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'main()'", "'if'", "'else'", "'while'", "'for'", "'print'", 
            "'return'", "'='", "'+'", "'-'", "'*'", "'/'", "'^'", "'%'", 
            "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'++'", "'--'", 
            "'int'", "'float'", "'boolean'", "'string'", "'('", "')'", "'{'", 
            "'}'", "';'", "','" ]

    symbolicNames = [ "<INVALID>",
            "MAIN", "IF", "ELSE", "WHILE", "FOR", "PRINT", "RETURN", "ASIGNACION", 
            "MAS", "MENOS", "MULTIPLICACION", "DIVISION", "POTENCIA", "MOD", 
            "IGUAL", "DIFERENTE", "MENOR", "MAYOR", "MENOR_IGUAL_QUE", "MAYOR_IGUAL_QUE", 
            "MASMAS", "MENOSMENOS", "INT", "FLOAT", "BOOLEAN", "STRING", 
            "VARIABLE", "NUMERO", "CADENA", "BOOLEANO", "PARENTESIS_APERTURA", 
            "PARENTESIS_CIERRE", "LLAVE_APERTURA", "LLAVE_CIERRE", "FIN_DE_LINEA", 
            "COMA", "WS", "COMENTARIO_LINEA", "COMENTARIO_MULTILINEA" ]

    ruleNames = [ "MAIN", "IF", "ELSE", "WHILE", "FOR", "PRINT", "RETURN", 
                  "ASIGNACION", "MAS", "MENOS", "MULTIPLICACION", "DIVISION", 
                  "POTENCIA", "MOD", "IGUAL", "DIFERENTE", "MENOR", "MAYOR", 
                  "MENOR_IGUAL_QUE", "MAYOR_IGUAL_QUE", "MASMAS", "MENOSMENOS", 
                  "INT", "FLOAT", "BOOLEAN", "STRING", "VARIABLE", "NUMERO", 
                  "CADENA", "BOOLEANO", "PARENTESIS_APERTURA", "PARENTESIS_CIERRE", 
                  "LLAVE_APERTURA", "LLAVE_CIERRE", "FIN_DE_LINEA", "COMA", 
                  "WS", "COMENTARIO_LINEA", "COMENTARIO_MULTILINEA" ]

    grammarFileName = "Gramatica.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


