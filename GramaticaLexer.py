# Generated from Gramatica.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,248,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,
        1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,
        1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,
        1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,15,1,15,
        1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,
        1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,
        5,24,166,8,24,10,24,12,24,169,9,24,1,25,4,25,172,8,25,11,25,12,25,
        173,1,25,1,25,4,25,178,8,25,11,25,12,25,179,3,25,182,8,25,1,26,1,
        26,5,26,186,8,26,10,26,12,26,189,9,26,1,26,1,26,1,27,1,27,1,27,1,
        27,1,27,1,27,1,27,1,27,1,27,3,27,202,8,27,1,28,1,28,1,29,1,29,1,
        30,1,30,1,31,1,31,1,32,1,32,1,33,4,33,215,8,33,11,33,12,33,216,1,
        33,1,33,1,34,1,34,1,34,1,34,1,34,5,34,226,8,34,10,34,12,34,229,9,
        34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,5,35,238,8,35,10,35,12,35,
        241,9,35,1,35,1,35,1,35,1,35,1,35,1,35,1,239,0,36,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
        27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,1,0,6,3,
        0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,
        10,10,13,13,34,34,3,0,9,10,13,13,32,32,2,0,10,10,13,13,256,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
        0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
        0,1,73,1,0,0,0,3,80,1,0,0,0,5,83,1,0,0,0,7,88,1,0,0,0,9,94,1,0,0,
        0,11,98,1,0,0,0,13,104,1,0,0,0,15,106,1,0,0,0,17,108,1,0,0,0,19,
        110,1,0,0,0,21,112,1,0,0,0,23,114,1,0,0,0,25,116,1,0,0,0,27,119,
        1,0,0,0,29,122,1,0,0,0,31,124,1,0,0,0,33,126,1,0,0,0,35,129,1,0,
        0,0,37,132,1,0,0,0,39,135,1,0,0,0,41,138,1,0,0,0,43,142,1,0,0,0,
        45,148,1,0,0,0,47,156,1,0,0,0,49,163,1,0,0,0,51,171,1,0,0,0,53,183,
        1,0,0,0,55,201,1,0,0,0,57,203,1,0,0,0,59,205,1,0,0,0,61,207,1,0,
        0,0,63,209,1,0,0,0,65,211,1,0,0,0,67,214,1,0,0,0,69,220,1,0,0,0,
        71,232,1,0,0,0,73,74,5,109,0,0,74,75,5,97,0,0,75,76,5,105,0,0,76,
        77,5,110,0,0,77,78,5,40,0,0,78,79,5,41,0,0,79,2,1,0,0,0,80,81,5,
        105,0,0,81,82,5,102,0,0,82,4,1,0,0,0,83,84,5,101,0,0,84,85,5,108,
        0,0,85,86,5,115,0,0,86,87,5,101,0,0,87,6,1,0,0,0,88,89,5,119,0,0,
        89,90,5,104,0,0,90,91,5,105,0,0,91,92,5,108,0,0,92,93,5,101,0,0,
        93,8,1,0,0,0,94,95,5,102,0,0,95,96,5,111,0,0,96,97,5,114,0,0,97,
        10,1,0,0,0,98,99,5,112,0,0,99,100,5,114,0,0,100,101,5,105,0,0,101,
        102,5,110,0,0,102,103,5,116,0,0,103,12,1,0,0,0,104,105,5,61,0,0,
        105,14,1,0,0,0,106,107,5,43,0,0,107,16,1,0,0,0,108,109,5,45,0,0,
        109,18,1,0,0,0,110,111,5,42,0,0,111,20,1,0,0,0,112,113,5,47,0,0,
        113,22,1,0,0,0,114,115,5,94,0,0,115,24,1,0,0,0,116,117,5,61,0,0,
        117,118,5,61,0,0,118,26,1,0,0,0,119,120,5,33,0,0,120,121,5,61,0,
        0,121,28,1,0,0,0,122,123,5,60,0,0,123,30,1,0,0,0,124,125,5,62,0,
        0,125,32,1,0,0,0,126,127,5,60,0,0,127,128,5,61,0,0,128,34,1,0,0,
        0,129,130,5,62,0,0,130,131,5,61,0,0,131,36,1,0,0,0,132,133,5,43,
        0,0,133,134,5,43,0,0,134,38,1,0,0,0,135,136,5,45,0,0,136,137,5,45,
        0,0,137,40,1,0,0,0,138,139,5,105,0,0,139,140,5,110,0,0,140,141,5,
        116,0,0,141,42,1,0,0,0,142,143,5,102,0,0,143,144,5,108,0,0,144,145,
        5,111,0,0,145,146,5,97,0,0,146,147,5,116,0,0,147,44,1,0,0,0,148,
        149,5,98,0,0,149,150,5,111,0,0,150,151,5,111,0,0,151,152,5,108,0,
        0,152,153,5,101,0,0,153,154,5,97,0,0,154,155,5,110,0,0,155,46,1,
        0,0,0,156,157,5,115,0,0,157,158,5,116,0,0,158,159,5,114,0,0,159,
        160,5,105,0,0,160,161,5,110,0,0,161,162,5,103,0,0,162,48,1,0,0,0,
        163,167,7,0,0,0,164,166,7,1,0,0,165,164,1,0,0,0,166,169,1,0,0,0,
        167,165,1,0,0,0,167,168,1,0,0,0,168,50,1,0,0,0,169,167,1,0,0,0,170,
        172,7,2,0,0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,173,
        174,1,0,0,0,174,181,1,0,0,0,175,177,5,46,0,0,176,178,7,2,0,0,177,
        176,1,0,0,0,178,179,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,
        182,1,0,0,0,181,175,1,0,0,0,181,182,1,0,0,0,182,52,1,0,0,0,183,187,
        5,34,0,0,184,186,8,3,0,0,185,184,1,0,0,0,186,189,1,0,0,0,187,185,
        1,0,0,0,187,188,1,0,0,0,188,190,1,0,0,0,189,187,1,0,0,0,190,191,
        5,34,0,0,191,54,1,0,0,0,192,193,5,116,0,0,193,194,5,114,0,0,194,
        195,5,117,0,0,195,202,5,101,0,0,196,197,5,102,0,0,197,198,5,97,0,
        0,198,199,5,108,0,0,199,200,5,115,0,0,200,202,5,101,0,0,201,192,
        1,0,0,0,201,196,1,0,0,0,202,56,1,0,0,0,203,204,5,40,0,0,204,58,1,
        0,0,0,205,206,5,41,0,0,206,60,1,0,0,0,207,208,5,123,0,0,208,62,1,
        0,0,0,209,210,5,125,0,0,210,64,1,0,0,0,211,212,5,59,0,0,212,66,1,
        0,0,0,213,215,7,4,0,0,214,213,1,0,0,0,215,216,1,0,0,0,216,214,1,
        0,0,0,216,217,1,0,0,0,217,218,1,0,0,0,218,219,6,33,0,0,219,68,1,
        0,0,0,220,221,5,45,0,0,221,222,5,45,0,0,222,223,5,45,0,0,223,227,
        1,0,0,0,224,226,8,5,0,0,225,224,1,0,0,0,226,229,1,0,0,0,227,225,
        1,0,0,0,227,228,1,0,0,0,228,230,1,0,0,0,229,227,1,0,0,0,230,231,
        6,34,0,0,231,70,1,0,0,0,232,233,5,45,0,0,233,234,5,45,0,0,234,235,
        5,45,0,0,235,239,1,0,0,0,236,238,9,0,0,0,237,236,1,0,0,0,238,241,
        1,0,0,0,239,240,1,0,0,0,239,237,1,0,0,0,240,242,1,0,0,0,241,239,
        1,0,0,0,242,243,5,45,0,0,243,244,5,45,0,0,244,245,5,45,0,0,245,246,
        1,0,0,0,246,247,6,35,0,0,247,72,1,0,0,0,10,0,167,173,179,181,187,
        201,216,227,239,1,6,0,0
    ]

class GramaticaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    MAIN = 1
    IF = 2
    ELSE = 3
    WHILE = 4
    FOR = 5
    PRINT = 6
    ASIGNACION = 7
    MAS = 8
    MENOS = 9
    MULTIPLICACION = 10
    DIVISION = 11
    POTENCIA = 12
    IGUAL = 13
    DIFERENTE = 14
    MENOR = 15
    MAYOR = 16
    MENOR_IGUAL_QUE = 17
    MAYOR_IGUAL_QUE = 18
    MASMAS = 19
    MENOSMENOS = 20
    INT = 21
    FLOAT = 22
    BOOLEAN = 23
    STRING = 24
    VARIABLE = 25
    NUMERO = 26
    CADENA = 27
    BOOLEANO = 28
    PARENTESIS_APERTURA = 29
    PARENTESIS_CIERRE = 30
    LLAVE_APERTURA = 31
    LLAVE_CIERRE = 32
    FIN_DE_LINEA = 33
    WS = 34
    COMENTARIO_LINEA = 35
    COMENTARIO_MULTILINEA = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'main()'", "'if'", "'else'", "'while'", "'for'", "'print'", 
            "'='", "'+'", "'-'", "'*'", "'/'", "'^'", "'=='", "'!='", "'<'", 
            "'>'", "'<='", "'>='", "'++'", "'--'", "'int'", "'float'", "'boolean'", 
            "'string'", "'('", "')'", "'{'", "'}'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "MAIN", "IF", "ELSE", "WHILE", "FOR", "PRINT", "ASIGNACION", 
            "MAS", "MENOS", "MULTIPLICACION", "DIVISION", "POTENCIA", "IGUAL", 
            "DIFERENTE", "MENOR", "MAYOR", "MENOR_IGUAL_QUE", "MAYOR_IGUAL_QUE", 
            "MASMAS", "MENOSMENOS", "INT", "FLOAT", "BOOLEAN", "STRING", 
            "VARIABLE", "NUMERO", "CADENA", "BOOLEANO", "PARENTESIS_APERTURA", 
            "PARENTESIS_CIERRE", "LLAVE_APERTURA", "LLAVE_CIERRE", "FIN_DE_LINEA", 
            "WS", "COMENTARIO_LINEA", "COMENTARIO_MULTILINEA" ]

    ruleNames = [ "MAIN", "IF", "ELSE", "WHILE", "FOR", "PRINT", "ASIGNACION", 
                  "MAS", "MENOS", "MULTIPLICACION", "DIVISION", "POTENCIA", 
                  "IGUAL", "DIFERENTE", "MENOR", "MAYOR", "MENOR_IGUAL_QUE", 
                  "MAYOR_IGUAL_QUE", "MASMAS", "MENOSMENOS", "INT", "FLOAT", 
                  "BOOLEAN", "STRING", "VARIABLE", "NUMERO", "CADENA", "BOOLEANO", 
                  "PARENTESIS_APERTURA", "PARENTESIS_CIERRE", "LLAVE_APERTURA", 
                  "LLAVE_CIERRE", "FIN_DE_LINEA", "WS", "COMENTARIO_LINEA", 
                  "COMENTARIO_MULTILINEA" ]

    grammarFileName = "Gramatica.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


